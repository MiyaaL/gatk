
buildscript {
    repositories {
        mavenCentral()
     }
}


plugins {
    id "java"           // set up default java compile and test tasks
    id "jacoco"
}

repositories {
    mavenCentral()

    maven {
        url "https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot/" //for htsjdk snapshots
    }
    mavenLocal()
}

apply from: "testsettings.gradle"

// This method unpacks the classes from a jar. This is necessary because the version of testNG we use cannot discover test
// classes from fram a .jar file, so we must unpackage them in order to run the tests.
task unpackTestJars(type: Copy){
    String testClassesJar = "$System.env.TEST_JAR"
    String testDependencyJar = "$System.env.TEST_DEPENDENCY_JAR"
    String gatkJar = "$System.env.GATK_JAR"
    String testClassesDir = "$System.env.CP_DIR"

    description = "Unpackage classes from 'System.env.TEST_JAR' into 'System.env.CP_DIR'"

    System.out.println("testClassesJar::: " + testClassesJar + " :::testClassesDir::: " + testClassesDir + " :::testDependencyJar::: " + testDependencyJar + " :::gatkJar::: " + gatkJar )
    
//    // put all of the classes required into a single dir, and use the individual files as the
//    // classpath to prevent inter-module access exceptions on Java 17
//    if (gatkJar != "null") {
//        System.out.println("starting gatkJar");
//        from zipTree(gatkJar)
//        into testClassesDir
//    }
//
//    if (testDependencyJar != "null") {
//        System.out.println("starting testDependencyJar");
//        from zipTree(testDependencyJar)
//        into testClassesDir
//    }

    if (testClassesJar != "null"){
        System.out.println("starting testClassesJar");
        from zipTree(testClassesJar)
        into testClassesDir
    }
}

//run {
//    jvmArgs = ['--add-exports', 'java.base/sun.nio.ch=ALL-UNNAMED',
//               '--add-opens', 'java.base/sun.nio.fs=ALL-UNNAMED',
//               '--add-opens', 'java.base/java.nio=ALL-UNNAMED',
//               '--add-opens', 'java.base/java.io=ALL-UNNAMED',
//               '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED'
//    ]
//}
test {
    jacoco {
        jvmArgs += ['--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
                   '--add-opens', 'java.base/sun.nio.fs=ALL-UNNAMED',
                   '--add-opens', 'java.base/java.nio=ALL-UNNAMED',
                   '--add-opens', 'java.base/java.io=ALL-UNNAMED',
                   '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
                   '--add-opens', 'java.base/java.lang=ALL-UNNAMED' // required for jacoco

        ]
    }
}

task testOnPackagedReleaseJar(type: Test){
    String testClassesJar = "$System.env.TEST_JAR"
    String testDependencyJar = "$System.env.TEST_DEPENDENCY_JAR"
    String gatkJar = "$System.env.GATK_JAR"
    String testClassesUnpacked = "$System.env.CP_DIR"

    description = "A test task intended to be run on the release jar inside the docker image of gatk with dependencies provided as volumes"

    dependsOn unpackTestJars

    doFirst {
        if (testDependencyJar == "null") {
            throw new GradleException("Environment variable 'TEST_DEPENDENCY_JAR' not specified")
        }
        if (gatkJar == "null") {
            throw new GradleException("Environment variable 'GATK_JAR' not specified")
        }
        if (testClassesJar == "null") {
            throw new GradleException("Environment variable 'TEST_JAR' not specified")
        }
        logger.lifecycle("The classpath used for this test:")
        classpath.each {println it}
    }

    classpath = files(testDependencyJar)
    testClassesDirs = files(testClassesUnpacked)
}

//task fatTestJar(type: Jar) {
//    manifest {
//        attributes 'Main-Class': 'org.broadinstitue.hellbender.Main'
//    }
//    setArchivesBaseName('test-uber-jar')
//    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//    from { configurations.testClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
//    with jar
//}

// Task intended to collect coverage data from testOnPackagedReleaseJar executed inside the docker image
// the classpath for these tests is set at execution time for testOnPackagedReleaseJar
task jacocoTestReportOnPackagedReleaseJar(type: JacocoReport) {
    String sourceFiles = "$System.env.SOURCE_DIR"
    String testClassesUnpacked = "$System.env.CP_DIR"

    dependsOn testOnPackagedReleaseJar
    executionData testOnPackagedReleaseJar
    additionalSourceDirs.setFrom(sourceSets.main.allJava.srcDirs)

    sourceDirectories.setFrom(sourceFiles)
    classDirectories.setFrom(testClassesUnpacked)

    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests inside the docker image."

    reports {
        xml.enabled = true
        html.enabled = true
    }
}
